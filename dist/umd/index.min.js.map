{"version":3,"file":"index.min.js","sources":["../../src/SimplePromiseQueue.ts","../../src/utils.ts","../../src/index.ts"],"sourcesContent":["// tslint:disable: variable-name\r\nexport default class SimplePromiseQueue {\r\n  private readonly _queue: Array<Promise<void>> = []\r\n  private _flushing = false\r\n\r\n  public enqueue(promise: Promise<void>) {\r\n    this._queue.push(promise)\r\n    if (!this._flushing) { return this.flushQueue() }\r\n    return Promise.resolve()\r\n  }\r\n\r\n  private flushQueue() {\r\n    this._flushing = true\r\n\r\n    const chain = (): Promise<void> | void => {\r\n      const nextTask = this._queue.shift()\r\n      if (nextTask) {\r\n        return nextTask.then(chain)\r\n      } else {\r\n        this._flushing = false\r\n      }\r\n    }\r\n    return Promise.resolve(chain())\r\n  }\r\n}\r\n","import deepmerge from 'deepmerge'\r\n\r\nexport function merge<I, F>(into: Partial<I>, from: Partial<F>, mergeOption: deepmerge.Options): I & F {\r\n  return deepmerge(into, from, mergeOption)\r\n}\r\n","/**\r\n * Created by championswimmer on 18/07/17.\r\n */\r\nimport { Mutation, MutationPayload, Plugin, Store } from 'vuex'\r\nimport { AsyncStorage } from './AsyncStorage'\r\nimport { MockStorage } from './MockStorage'\r\nimport { PersistOptions } from './PersistOptions'\r\nimport SimplePromiseQueue from './SimplePromiseQueue'\r\nimport { merge } from './utils'\r\nimport deepmerge from \"deepmerge\"\r\n\r\nlet FlattedJSON = JSON\r\n\r\n/**\r\n * A class that implements the vuex persistence.\r\n * @type S type of the 'state' inside the store (default: any)\r\n */\r\nexport class VuexPersistence<S> implements PersistOptions<S> {\r\n  public asyncStorage: boolean\r\n  public storage: Storage | AsyncStorage | undefined\r\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\r\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage) => Promise<void> | void\r\n  public reducer: (state: S) => Partial<S>\r\n  public key: string\r\n  public filter: (mutation: MutationPayload) => boolean\r\n  public modules: string[]\r\n  public strictMode: boolean\r\n  public supportCircular: boolean\r\n  public mergeOption: deepmerge.Options\r\n\r\n  /**\r\n   * The plugin function that can be used inside a vuex store.\r\n   */\r\n  public plugin: Plugin<S>\r\n  /**\r\n   * A mutation that can be used to restore state\r\n   * Helpful if we are running in strict mode\r\n   */\r\n  public RESTORE_MUTATION: Mutation<S>\r\n  public subscribed: boolean\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private _mutex = new SimplePromiseQueue()\r\n\r\n  /**\r\n   * Create a {@link VuexPersistence} object.\r\n   * Use the <code>plugin</code> function of this class as a\r\n   * Vuex plugin.\r\n   * @param {PersistOptions} options\r\n   */\r\n  public constructor(options?: PersistOptions<S>) {\r\n    if (typeof options === 'undefined') options = {} as PersistOptions<S>\r\n    this.key = ((options.key != null) ? options.key : 'vuex')\r\n\r\n    this.subscribed = false\r\n    this.supportCircular = options.supportCircular || false\r\n    if (this.supportCircular) {\r\n      FlattedJSON = require('flatted')\r\n    }\r\n    this.mergeOption = options.mergeOption || 'replaceArrays'\r\n\r\n    let localStorageLitmus = true\r\n\r\n    try {\r\n      window.localStorage.getItem('')\r\n    } catch (err) {\r\n      localStorageLitmus = false\r\n    }\r\n\r\n    /**\r\n     * 1. First, prefer storage sent in optinos\r\n     * 2. Otherwise, use window.localStorage if available\r\n     * 3. Finally, try to use MockStorage\r\n     * 4. None of above? Well we gotta fail.\r\n     */\r\n    if (options.storage) { this.storage = options.storage }\r\n    else if (localStorageLitmus) { this.storage = window.localStorage }\r\n    else if (MockStorage) { this.storage = new MockStorage() }\r\n    else { throw new Error(\"Neither 'window' is defined, nor 'MockStorage' is available\") }\r\n\r\n    /**\r\n     * How this works is -\r\n     *  1. If there is options.reducer function, we use that, if not;\r\n     *  2. We check options.modules;\r\n     *    1. If there is no options.modules array, we use entire state in reducer\r\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\r\n     *        defined in the options.modules[] array\r\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\r\n     */\r\n    this.reducer = (\r\n      (options.reducer != null)\r\n        ? options.reducer\r\n        : (\r\n          (options.modules == null)\r\n            ? ((state: S) => state)\r\n            : (\r\n              (state: any) =>\r\n                (options!.modules as string[]).reduce((a, i) =>\r\n                  merge(a, { [i]: state[i] }, this.mergeOption), {/* start empty accumulator*/ })\r\n            )\r\n        )\r\n    )\r\n\r\n    this.filter = options.filter || ((mutation) => true)\r\n\r\n    this.strictMode = options.strictMode || false\r\n\r\n    const _this = this\r\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\r\n      const mergedState = merge(state as Partial<S>, savedState || {}, _this.mergeOption)\r\n      for (const propertyName of Object.keys(mergedState as {})) {\r\n        // Maintain support for vue 2\r\n        if ((this as any)._vm !== undefined && (this as any)._vm.$set !== undefined) {\r\n          (this as any)._vm.$set(state, propertyName, (mergedState as any)[propertyName])\r\n          continue\r\n        }\r\n\r\n        (state as any)[propertyName] = (mergedState as any)[propertyName]\r\n      }\r\n    }\r\n\r\n    this.asyncStorage = options.asyncStorage || false\r\n\r\n    if (this.asyncStorage) {\r\n\r\n      /**\r\n       * Async {@link #VuexPersistence.restoreState} implementation\r\n       * @type {((key: string, storage?: Storage) =>\r\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\r\n       */\r\n      this.restoreState = (\r\n        (options.restoreState != null)\r\n          ? options.restoreState\r\n          : ((key: string, storage: AsyncStorage) =>\r\n            (storage).getItem(key)\r\n              .then((value) =>\r\n                typeof value === 'string' // If string, parse, or else, just return\r\n                  ? (\r\n                    this.supportCircular\r\n                      ? FlattedJSON.parse(value || '{}')\r\n                      : JSON.parse(value || '{}')\r\n                  )\r\n                  : (value || {})\r\n              )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Async {@link #VuexPersistence.saveState} implementation\r\n       * @type {((key: string, state: {}, storage?: Storage) =>\r\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\r\n       */\r\n      this.saveState = (\r\n        (options.saveState != null)\r\n          ? options.saveState\r\n          : ((key: string, state: {}, storage: AsyncStorage) =>\r\n            (storage).setItem(\r\n              key, // Second argument is state _object_ if asyc storage, stringified otherwise\r\n              // do not stringify the state if the storage type is async\r\n              (this.asyncStorage\r\n                ? merge({}, state || {}, this.mergeOption)\r\n                : (\r\n                  this.supportCircular\r\n                    ? FlattedJSON.stringify(state) as any\r\n                    : JSON.stringify(state) as any\r\n                )\r\n              )\r\n            )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Async version of plugin\r\n       * @param {Store<S>} store\r\n       */\r\n      this.plugin = (store: Store<S>) => {\r\n        /**\r\n         * For async stores, we're capturing the Promise returned\r\n         * by the `restoreState()` function in a `restored` property\r\n         * on the store itself. This would allow app developers to\r\n         * determine when and if the store's state has indeed been\r\n         * refreshed. This approach was suggested by GitHub user @hotdogee.\r\n         * See https://github.com/championswimmer/vuex-persist/pull/118#issuecomment-500914963\r\n         * @since 2.1.0\r\n         */\r\n        (store as any).restored = ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\r\n          /**\r\n           * If in strict mode, do only via mutation\r\n           */\r\n          if (this.strictMode) {\r\n            store.commit('RESTORE_MUTATION', savedState)\r\n          } else {\r\n            store.replaceState(merge(store.state as Partial<S>, savedState || {}, this.mergeOption) as S)\r\n          }\r\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\r\n            if (this.filter(mutation)) {\r\n              this._mutex.enqueue(\r\n                this.saveState(this.key, this.reducer(state), this.storage) as Promise<void>\r\n              )\r\n            }\r\n          })\r\n          this.subscribed = true\r\n        })\r\n      }\r\n    } else {\r\n\r\n      /**\r\n       * Sync {@link #VuexPersistence.restoreState} implementation\r\n       * @type {((key: string, storage?: Storage) =>\r\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\r\n       */\r\n      this.restoreState = (\r\n        (options.restoreState != null)\r\n          ? options.restoreState\r\n          : ((key: string, storage: Storage) => {\r\n            const value = (storage).getItem(key)\r\n            if (typeof value === 'string') {// If string, parse, or else, just return\r\n              return (\r\n                this.supportCircular\r\n                  ? FlattedJSON.parse(value || '{}')\r\n                  : JSON.parse(value || '{}')\r\n              )\r\n            } else {\r\n              return (value || {})\r\n            }\r\n          })\r\n      )\r\n\r\n      /**\r\n       * Sync {@link #VuexPersistence.saveState} implementation\r\n       * @type {((key: string, state: {}, storage?: Storage) =>\r\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\r\n       */\r\n      this.saveState = (\r\n        (options.saveState != null)\r\n          ? options.saveState\r\n          : ((key: string, state: {}, storage: Storage) =>\r\n            (storage).setItem(\r\n              key, // Second argument is state _object_ if localforage, stringified otherwise\r\n              (\r\n                this.supportCircular\r\n                  ? FlattedJSON.stringify(state) as any\r\n                  : JSON.stringify(state) as any\r\n              )\r\n            )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Sync version of plugin\r\n       * @param {Store<S>} store\r\n       */\r\n      this.plugin = (store: Store<S>) => {\r\n        const savedState = this.restoreState(this.key, this.storage) as S\r\n\r\n        if (this.strictMode) {\r\n          store.commit('RESTORE_MUTATION', savedState)\r\n        } else {\r\n          store.replaceState(merge(store.state as Partial<S>, savedState || {}, this.mergeOption) as S)\r\n        }\r\n\r\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\r\n          if (this.filter(mutation)) {\r\n            this.saveState(this.key, this.reducer(state), this.storage)\r\n          }\r\n        })\r\n\r\n        this.subscribed = true\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a subscriber on the store. automatically is used\r\n   * when this is used a vuex plugin. Not for manual usage.\r\n   * @param store\r\n   */\r\n  private subscriber = (store: Store<S>) =>\r\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\r\n}\r\n\r\nexport {\r\n  MockStorage, AsyncStorage, PersistOptions\r\n}\r\n\r\nexport default VuexPersistence\r\n"],"names":["SimplePromiseQueue","promise","this","_queue","push","_flushing","Promise","resolve","flushQueue","chain","nextTask","_this","shift","then","merge","into","from","mergeOption","deepmerge","options","store","handler","subscribe","key","subscribed","supportCircular","FlattedJSON","require","localStorageLitmus","window","localStorage","getItem","err","storage","MockStorage","Error","reducer","modules","state","reduce","a","i","_this_1","filter","mutation","strictMode","RESTORE_MUTATION","savedState","mergedState","_a","Object","keys","_i","propertyName","undefined","_vm","$set","asyncStorage","restoreState","value","parse","JSON","saveState","setItem","stringify","plugin","restored","commit","replaceState","subscriber","_mutex","enqueue"],"mappings":"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"}